package edu.CSUSM.testTaker.Backend;

import java.util.ArrayList;
import java.util.Arrays;
import java.io.Serializable;

public class Question implements Serializable{
	static final long serialVersionUID = 1L;
	String myID;
	
	public String getID(){
		return myID;
	}
	
	public String _question, _courseID;
	public ArrayList<String> _answers;
	public int _correctIndex;
	public int _pointValue = 1;					//Sets the deault point value to 1
	
	public static int QUESTION_COUNT; //Keeps an always-updating count of questions per init in the program

	/**
	 * @param mainQuestion
	 */
	public Question(String mainQuestion){
		_answers = new ArrayList<String>();
		setQuestion(mainQuestion);
		
		/**Increment the total count of questions*/
		Question.QUESTION_COUNT++;
	}
	
	/**
	 * @param mainQuestion
	 * @param answers
	 * @param correctAnsIndex
	 */
	public Question(String mainQuestion, String[] answers, int correctAnsIndex){
		
		/* Set the main Question */
		setQuestion(mainQuestion);
		
		/* Add all possible answers to the list */
		this._answers = new ArrayList<String>(Arrays.asList(answers));
		
		/* Set the correct answer index */
		setCorrectIndex(correctAnsIndex);
		
		/**Increment the total count of questions*/
		Question.QUESTION_COUNT++;
	}
	
	/* Mutators */
	/**
	 * @param newQuestion overwrites the existing question, if any
	 */
	public void setQuestion(String newQuestion){
		this._question = newQuestion;
		}
	
	/**
	 * @param newAnswer Provides a new answer for the provided index
	 * @param index The current location of the answer that is being modified
	 */
	public void setAnswer(String newAnswer, int index){
		this._answers.set(index, newAnswer); 
		}
	
	/**
	 * @param additionalAnswer Adds a new answer the array
	 */
	public void addAnswer(String additionalAnswer){
		this._answers.add(additionalAnswer);
	}
	
	/**
	 * @param index of which references index of answers array
	 */
	public void setCorrectIndex(int index){
		this._correctIndex = index;
		}
	
	/* Accessors */
	/**
	 * @return The current question
	 */
	public String getQuestion(){
		return this._question;
	}
	
	/**
	 * @return a list of the correct answers
	 */
	public String[] getAnswers(){
		return this._answers.toArray(new String[this._answers.size()]);
	}
	
	/**
	 * @return the location to the correct answer within the answers array
	 */
	public int getCorrectIndex(){
		return this._correctIndex;
	}
	
	/**
	 * @param courseID sets the current course identifier
	 */
	public void setCourseID(String courseID){
		this._courseID = courseID;
	}
	
	/**
	 * @return the associated course identifier
	 */
	public String getCourseID(){
		return this._courseID;
	}
	
	@Override
	public String toString(){
		
		//Create the initial question
		String thisQuestionString = "Question: " + this._question;
				
		//Now, add each of the possible answers in the provided question
		for(int iterator = 0; iterator < this.getAnswers().length; iterator++){
			thisQuestionString += "\n\t\t " + (iterator+1) + ") " + this._answers.get(iterator);
			
			//If the answer is correct, add an asterisk to the end
			thisQuestionString += (iterator == this._correctIndex) ? " *correct*" : "";
		}
		
		//Return the result
		return thisQuestionString;
	}
}
